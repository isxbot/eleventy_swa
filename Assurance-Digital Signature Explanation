The first piece of evidence (E1) stems from Kafkaâ€™s dynamic security settings.  System administrators can force an SSL connection between all server cluster brokers and any clients, by activating a flag that requires SSL to be enabled on both ends of the data pipeline.  This flag is set to 'false', by default, and must be activated manually.  This feature supports claim (C2) and ensures that SSL is verified for each session.
Older versions of Kafka did not require brokers to be verified using their FQDN (full qualified domain name) and IP address, which presented the threat of man-in-the-middle attacks.  Newer versions do require such verification (E2), and system administrators can ensure this protection is running by setting automatic updates to broker and client Kafka APIs (C5).  
SSL key pairs must appropriately configured using the RSA or ECC algorithms, in order for SSL to work. Therefore, a flag is set with parameters to allow for key pair generation(C6); once this is done, Kafka will not allow a broker-client or broker-broker connection without the specified SSL connection(E3). 
Older client APIs did not implement SSL; the way to prevent pipelines with these older APIs is configuration of up-to-date Kafka brokers to require an SSL session or to refuse granting a session token with older client APIs (C7).  This is established via a Kafka broker API flag (E4).
