Kafka has inherent mechanisms to secure transactions between Kafka clusters, Zookeeper, brokers, and clients, with the foundation being SASL (Simple Authentication and Security Layer) and SSL.  Kafka also uses asymmetric encryption (public-private key pair) and authentication from cluster member brokers to the same entities.  Since clusters contain multiple brokers to maintain load balance, a broker leader is chosen as the master broker; if one fails, another takes its place seamlessly, which provides needed redundancy in case of failure due to hardware malfunction or a malicious attack.  Therefore, Kafka implements a secure design that mitigates many of the threats suggested in the modeling scenarios.
Kafka is resistant to DoS attacks due to its ability to operate independent of Zookeeper and its ability to promote a new broker leader within a cluster. This redundancy also mitigates data-flow interruption from an external agent compromising multiple brokers within a cluster, as Zookeeper can redirect the flow to other brokers, or clusters.  
Kafka prevents illicit privilege escalation through explicit ACLs and ECC encryption that is specific to a given broker. Each machine in a cluster has its own certificate signed by a trusted CA, which makes it infeasible for an attacker to forge and utilize for remote code injection.  Even if an attacker impersonates an application or producer, that individual will fail to affect the cluster due to the ACLs.  These design components adequately mitigate spoofing of Kafka brokers within a cluster, or client APIs.  
Zookeeper is a tempting target because it is external to the Kafka cluster, and has permissions to modify a cluster. However, Kafka clusters have the option to implement SASL ACLs on Zookeeper nodes to prevent aberrant modification and read-write to Zookeeper.  SSL encryption for Zookeeper-cluster communication prevents data-sniffing; these two mechanisms effectively maintain Kafka cluster integrity in event of Zookeeper compromise.
Kafka data is stored in an appended log form and one method to detect log tampering is through the use of metrics that include a timestamp, server function (e.g. append, read, write), size, source, and more. Kafka uses Yammer Metrics to monitor live server activity, which allows cross-checking with logs to infer if a malicious outside source tampers with logs.  Even if alterations are not caught in real-time, the metrics allow resulting logs to be used for auditing, or forensic analysis. 
Javascript is used by applications accessing Kafka clusters, and within the Kafka infrastructure.   Javascript is a stateless tool with the JVM (Java Virtual Machine) running in the background, and is a ripe tool used by hackers.  Kafka has a host of native open source metric components; the Kafka Monitor can profile the JVM for deployed broker-servers within a cluster.   
Overall, Kafka has deployed new security tools with successive iterations, with the latest including the OAUTHBEARER 2.0, which allows secure transactions between Kafka clusters and third-party applications.  There are some concerns, such as an event involving Zookeeper or a unique cluster crashing for a lengthy period, however, the security mechanisms in Kafkaâ€™s design are adequate to assure proper operation in light of known threats.
